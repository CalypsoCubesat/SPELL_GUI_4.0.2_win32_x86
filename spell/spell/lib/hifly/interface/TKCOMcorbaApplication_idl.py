# Python stubs generated by omniidl from TKCOMcorbaApplication.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "_GlobalIDL"
#
__name__ = "spell.lib.hifly.interface._GlobalIDL"
_0__GlobalIDL = omniORB.openModule("spell.lib.hifly.interface._GlobalIDL", r"TKCOMcorbaApplication.idl")
_0__GlobalIDL__POA = omniORB.openModule("spell.lib.hifly.interface._GlobalIDL__POA", r"TKCOMcorbaApplication.idl")


# interface TKCOMcorbaApplication
_0__GlobalIDL._d_TKCOMcorbaApplication = (omniORB.tcInternal.tv_objref, "IDL:TKCOMcorbaApplication:1.0", "TKCOMcorbaApplication")
omniORB.typeMapping["IDL:TKCOMcorbaApplication:1.0"] = _0__GlobalIDL._d_TKCOMcorbaApplication
_0__GlobalIDL.TKCOMcorbaApplication = omniORB.newEmptyClass()
class TKCOMcorbaApplication :
    _NP_RepositoryId = _0__GlobalIDL._d_TKCOMcorbaApplication[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0__GlobalIDL.TKCOMcorbaApplication = TKCOMcorbaApplication
_0__GlobalIDL._tc_TKCOMcorbaApplication = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_TKCOMcorbaApplication)
omniORB.registerType(TKCOMcorbaApplication._NP_RepositoryId, _0__GlobalIDL._d_TKCOMcorbaApplication, _0__GlobalIDL._tc_TKCOMcorbaApplication)

# TKCOMcorbaApplication operations and attributes
TKCOMcorbaApplication._d_deIconify = ((), (), None)
TKCOMcorbaApplication._d_stop = ((), (), None)
TKCOMcorbaApplication._d_setServerFamily = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), None)

# TKCOMcorbaApplication object reference
class _objref_TKCOMcorbaApplication (CORBA.Object):
    _NP_RepositoryId = TKCOMcorbaApplication._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def deIconify(self, *args):
        return _omnipy.invoke(self, "deIconify", _0__GlobalIDL.TKCOMcorbaApplication._d_deIconify, args)

    def stop(self, *args):
        return _omnipy.invoke(self, "stop", _0__GlobalIDL.TKCOMcorbaApplication._d_stop, args)

    def setServerFamily(self, *args):
        return _omnipy.invoke(self, "setServerFamily", _0__GlobalIDL.TKCOMcorbaApplication._d_setServerFamily, args)

    __methods__ = ["deIconify", "stop", "setServerFamily"] + CORBA.Object.__methods__

omniORB.registerObjref(TKCOMcorbaApplication._NP_RepositoryId, _objref_TKCOMcorbaApplication)
_0__GlobalIDL._objref_TKCOMcorbaApplication = _objref_TKCOMcorbaApplication
del TKCOMcorbaApplication, _objref_TKCOMcorbaApplication

# TKCOMcorbaApplication skeleton
__name__ = "spell.lib.hifly.interface._GlobalIDL__POA"
class TKCOMcorbaApplication (PortableServer.Servant):
    _NP_RepositoryId = _0__GlobalIDL.TKCOMcorbaApplication._NP_RepositoryId


    _omni_op_d = {"deIconify": _0__GlobalIDL.TKCOMcorbaApplication._d_deIconify, "stop": _0__GlobalIDL.TKCOMcorbaApplication._d_stop, "setServerFamily": _0__GlobalIDL.TKCOMcorbaApplication._d_setServerFamily}

TKCOMcorbaApplication._omni_skeleton = TKCOMcorbaApplication
_0__GlobalIDL__POA.TKCOMcorbaApplication = TKCOMcorbaApplication
omniORB.registerSkeleton(TKCOMcorbaApplication._NP_RepositoryId, TKCOMcorbaApplication)
del TKCOMcorbaApplication
__name__ = "spell.lib.hifly.interface._GlobalIDL"

#
# End of module "_GlobalIDL"
#
__name__ = "spell.lib.hifly.interface.TKCOMcorbaApplication_idl"

_exported_modules = ( "spell.lib.hifly.interface._GlobalIDL", )

# The end.
