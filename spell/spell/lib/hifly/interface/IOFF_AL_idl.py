# Python stubs generated by omniidl from IOFF_AL.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "IBASE.idl"
import spell.lib.hifly.interface.IBASE_idl
_0_IBASE = omniORB.openModule("spell.lib.hifly.interface.IBASE")
_0_IBASE__POA = omniORB.openModule("spell.lib.hifly.interface.IBASE__POA")
# #include "IBASE_IF.idl"
import spell.lib.hifly.interface.IBASE_IF_idl
_0_IBASE_IF = omniORB.openModule("spell.lib.hifly.interface.IBASE_IF")
_0_IBASE_IF__POA = omniORB.openModule("spell.lib.hifly.interface.IBASE_IF__POA")

#
# Start of module "IOFF_AL"
#
__name__ = "spell.lib.hifly.interface.IOFF_AL"
_0_IOFF_AL = omniORB.openModule("spell.lib.hifly.interface.IOFF_AL", r"IOFF_AL.idl")
_0_IOFF_AL__POA = omniORB.openModule("spell.lib.hifly.interface.IOFF_AL__POA", r"IOFF_AL.idl")

_0_IOFF_AL.OFF_AL_AUTH_KEYS = 1
_0_IOFF_AL.OFF_AL_PRIME_TM_EXPORT = 2
_0_IOFF_AL.OFF_AL_PRIME_TC_EXPORT = 3
_0_IOFF_AL.OFF_AL_PRIME_EV_EXPORT = 4
_0_IOFF_AL.OFF_AL_PRIME_MISC_EXPORT = 5
_0_IOFF_AL.OFF_AL_BKUP_TM_EXPORT = 6
_0_IOFF_AL.OFF_AL_BKUP_TC_EXPORT = 7
_0_IOFF_AL.OFF_AL_BKUP_EV_EXPORT = 8
_0_IOFF_AL.OFF_AL_BKUP_MISC_EXPORT = 9
_0_IOFF_AL.OFF_AL_ENCRYPTION_KEY = 10
_0_IOFF_AL.OFF_AL_MISC_VARIABLE_STR = 11
_0_IOFF_AL.OFF_AL_MISC_VARIABLE_INT = 12
_0_IOFF_AL.OFF_AL_MISC_VARIABLE_DBL = 13
_0_IOFF_AL.OFF_AL_MISC_VARIABLE_VEC = 14
_0_IOFF_AL.OFF_AL_MISC_VAR_PKT = 22
_0_IOFF_AL.OFF_AL_SCHSTK_DATA = 23
_0_IOFF_AL.OFF_AL_CLSTK_DATA = 24
_0_IOFF_AL.OFF_AL_EVESCH_SCH = 25
_0_IOFF_AL.OFF_AL_IWPR_DATA = 26
_0_IOFF_AL.OFF_AL_EWPR_DATA = 27

# enum OperationResult
_0_IOFF_AL.SUCCESS = omniORB.EnumItem("SUCCESS", 0)
_0_IOFF_AL.FAILED_BAD_ARGUMENT = omniORB.EnumItem("FAILED_BAD_ARGUMENT", 1)
_0_IOFF_AL.FAILED_EXPORT = omniORB.EnumItem("FAILED_EXPORT", 2)
_0_IOFF_AL.FAILED_IMPORT = omniORB.EnumItem("FAILED_IMPORT", 3)
_0_IOFF_AL.FAILED_SET_VAR = omniORB.EnumItem("FAILED_SET_VAR", 4)
_0_IOFF_AL.FAILED_GET_VAR = omniORB.EnumItem("FAILED_GET_VAR", 5)
_0_IOFF_AL.FAILED_NOT_IMPLEMENTED = omniORB.EnumItem("FAILED_NOT_IMPLEMENTED", 6)
_0_IOFF_AL.FAILED_WRITE_FILE = omniORB.EnumItem("FAILED_WRITE_FILE", 7)
_0_IOFF_AL.FAILED_READ_FILE = omniORB.EnumItem("FAILED_READ_FILE", 8)
_0_IOFF_AL.FAILED_ABORT = omniORB.EnumItem("FAILED_ABORT", 9)
_0_IOFF_AL.FAILED_UKN_TYPE = omniORB.EnumItem("FAILED_UKN_TYPE", 10)
_0_IOFF_AL.OperationResult = omniORB.Enum("IDL:IOFF_AL/OperationResult:1.0", (_0_IOFF_AL.SUCCESS, _0_IOFF_AL.FAILED_BAD_ARGUMENT, _0_IOFF_AL.FAILED_EXPORT, _0_IOFF_AL.FAILED_IMPORT, _0_IOFF_AL.FAILED_SET_VAR, _0_IOFF_AL.FAILED_GET_VAR, _0_IOFF_AL.FAILED_NOT_IMPLEMENTED, _0_IOFF_AL.FAILED_WRITE_FILE, _0_IOFF_AL.FAILED_READ_FILE, _0_IOFF_AL.FAILED_ABORT, _0_IOFF_AL.FAILED_UKN_TYPE,))

_0_IOFF_AL._d_OperationResult  = (omniORB.tcInternal.tv_enum, _0_IOFF_AL.OperationResult._NP_RepositoryId, "OperationResult", _0_IOFF_AL.OperationResult._items)
_0_IOFF_AL._tc_OperationResult = omniORB.tcInternal.createTypeCode(_0_IOFF_AL._d_OperationResult)
omniORB.registerType(_0_IOFF_AL.OperationResult._NP_RepositoryId, _0_IOFF_AL._d_OperationResult, _0_IOFF_AL._tc_OperationResult)

# interface Offline_Alignment
_0_IOFF_AL._d_Offline_Alignment = (omniORB.tcInternal.tv_objref, "IDL:IOFF_AL/Offline_Alignment:1.0", "Offline_Alignment")
omniORB.typeMapping["IDL:IOFF_AL/Offline_Alignment:1.0"] = _0_IOFF_AL._d_Offline_Alignment
_0_IOFF_AL.Offline_Alignment = omniORB.newEmptyClass()
class Offline_Alignment :
    _NP_RepositoryId = _0_IOFF_AL._d_Offline_Alignment[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    ServiceName = "OFF_AL"


_0_IOFF_AL.Offline_Alignment = Offline_Alignment
_0_IOFF_AL._tc_Offline_Alignment = omniORB.tcInternal.createTypeCode(_0_IOFF_AL._d_Offline_Alignment)
omniORB.registerType(Offline_Alignment._NP_RepositoryId, _0_IOFF_AL._d_Offline_Alignment, _0_IOFF_AL._tc_Offline_Alignment)

# Offline_Alignment operations and attributes
Offline_Alignment._d_getDataSet = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:IOFF_AL/OperationResult:1.0"], ), None)
Offline_Alignment._d_setDataSet = ((omniORB.tcInternal.tv_short, (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:IOFF_AL/OperationResult:1.0"], ), None)

# Offline_Alignment object reference
class _objref_Offline_Alignment (CORBA.Object):
    _NP_RepositoryId = Offline_Alignment._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def getDataSet(self, *args):
        return _omnipy.invoke(self, "getDataSet", _0_IOFF_AL.Offline_Alignment._d_getDataSet, args)

    def setDataSet(self, *args):
        return _omnipy.invoke(self, "setDataSet", _0_IOFF_AL.Offline_Alignment._d_setDataSet, args)

    __methods__ = ["getDataSet", "setDataSet"] + CORBA.Object.__methods__

omniORB.registerObjref(Offline_Alignment._NP_RepositoryId, _objref_Offline_Alignment)
_0_IOFF_AL._objref_Offline_Alignment = _objref_Offline_Alignment
del Offline_Alignment, _objref_Offline_Alignment

# Offline_Alignment skeleton
__name__ = "spell.lib.hifly.interface.IOFF_AL__POA"
class Offline_Alignment (PortableServer.Servant):
    _NP_RepositoryId = _0_IOFF_AL.Offline_Alignment._NP_RepositoryId


    _omni_op_d = {"getDataSet": _0_IOFF_AL.Offline_Alignment._d_getDataSet, "setDataSet": _0_IOFF_AL.Offline_Alignment._d_setDataSet}

Offline_Alignment._omni_skeleton = Offline_Alignment
_0_IOFF_AL__POA.Offline_Alignment = Offline_Alignment
omniORB.registerSkeleton(Offline_Alignment._NP_RepositoryId, Offline_Alignment)
del Offline_Alignment
__name__ = "spell.lib.hifly.interface.IOFF_AL"

#
# End of module "IOFF_AL"
#
__name__ = "spell.lib.hifly.interface.IOFF_AL_idl"

_exported_modules = ( "spell.lib.hifly.interface.IOFF_AL", )

# The end.
