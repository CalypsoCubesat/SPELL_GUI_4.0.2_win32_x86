# Python stubs generated by omniidl from IEV_INJ.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)

# #include "IBASE.idl"
import spell.lib.hifly.interface.IBASE_idl
_0_IBASE = omniORB.openModule("spell.lib.hifly.interface.IBASE")
_0_IBASE__POA = omniORB.openModule("spell.lib.hifly.interface.IBASE__POA")
# #include "IBASE_IF.idl"
import spell.lib.hifly.interface.IBASE_IF_idl
_0_IBASE_IF = omniORB.openModule("spell.lib.hifly.interface.IBASE_IF")
_0_IBASE_IF__POA = omniORB.openModule("spell.lib.hifly.interface.IBASE_IF__POA")
# #include "ITM.idl"
import spell.lib.hifly.interface.ITM_idl
_0_ITM = omniORB.openModule("spell.lib.hifly.interface.ITM")
_0_ITM__POA = omniORB.openModule("spell.lib.hifly.interface.ITM__POA")
# #include "IEV.idl"
import spell.lib.hifly.interface.IEV_idl
_0_IEV = omniORB.openModule("spell.lib.hifly.interface.IEV")
_0_IEV__POA = omniORB.openModule("spell.lib.hifly.interface.IEV__POA")

#
# Start of module "IEV_INJ"
#
__name__ = "spell.lib.hifly.interface.IEV_INJ"
_0_IEV_INJ = omniORB.openModule("spell.lib.hifly.interface.IEV_INJ", r"IEV_INJ.idl")
_0_IEV_INJ__POA = omniORB.openModule("spell.lib.hifly.interface.IEV_INJ__POA", r"IEV_INJ.idl")


# struct ResponseInfo
_0_IEV_INJ.ResponseInfo = omniORB.newEmptyClass()
class ResponseInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV_INJ/ResponseInfo:1.0"

    def __init__(self, clientCommandID, result):
        self.clientCommandID = clientCommandID
        self.result = result

_0_IEV_INJ.ResponseInfo = ResponseInfo
_0_IEV_INJ._d_ResponseInfo  = (omniORB.tcInternal.tv_struct, ResponseInfo, ResponseInfo._NP_RepositoryId, "ResponseInfo", "clientCommandID", (omniORB.tcInternal.tv_string,0), "result", omniORB.tcInternal.tv_boolean)
_0_IEV_INJ._tc_ResponseInfo = omniORB.tcInternal.createTypeCode(_0_IEV_INJ._d_ResponseInfo)
omniORB.registerType(ResponseInfo._NP_RepositoryId, _0_IEV_INJ._d_ResponseInfo, _0_IEV_INJ._tc_ResponseInfo)
del ResponseInfo

# interface EventInjectMngrView
_0_IEV_INJ._d_EventInjectMngrView = (omniORB.tcInternal.tv_objref, "IDL:IEV_INJ/EventInjectMngrView:1.0", "EventInjectMngrView")
omniORB.typeMapping["IDL:IEV_INJ/EventInjectMngrView:1.0"] = _0_IEV_INJ._d_EventInjectMngrView
_0_IEV_INJ.EventInjectMngrView = omniORB.newEmptyClass()
class EventInjectMngrView (_0_IBASE_IF.IBASE_IFheartbeatView):
    _NP_RepositoryId = _0_IEV_INJ._d_EventInjectMngrView[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_IEV_INJ.EventInjectMngrView = EventInjectMngrView
_0_IEV_INJ._tc_EventInjectMngrView = omniORB.tcInternal.createTypeCode(_0_IEV_INJ._d_EventInjectMngrView)
omniORB.registerType(EventInjectMngrView._NP_RepositoryId, _0_IEV_INJ._d_EventInjectMngrView, _0_IEV_INJ._tc_EventInjectMngrView)

# EventInjectMngrView operations and attributes
EventInjectMngrView._d_updateSystemCmdUpdate = ((omniORB.typeMapping["IDL:IEV_INJ/ResponseInfo:1.0"], ), (), None)

# EventInjectMngrView object reference
class _objref_EventInjectMngrView (_0_IBASE_IF._objref_IBASE_IFheartbeatView):
    _NP_RepositoryId = EventInjectMngrView._NP_RepositoryId

    def __init__(self):
        _0_IBASE_IF._objref_IBASE_IFheartbeatView.__init__(self)

    def updateSystemCmdUpdate(self, *args):
        return _omnipy.invoke(self, "updateSystemCmdUpdate", _0_IEV_INJ.EventInjectMngrView._d_updateSystemCmdUpdate, args)

    __methods__ = ["updateSystemCmdUpdate"] + _0_IBASE_IF._objref_IBASE_IFheartbeatView.__methods__

omniORB.registerObjref(EventInjectMngrView._NP_RepositoryId, _objref_EventInjectMngrView)
_0_IEV_INJ._objref_EventInjectMngrView = _objref_EventInjectMngrView
del EventInjectMngrView, _objref_EventInjectMngrView

# EventInjectMngrView skeleton
__name__ = "spell.lib.hifly.interface.IEV_INJ__POA"
class EventInjectMngrView (_0_IBASE_IF__POA.IBASE_IFheartbeatView):
    _NP_RepositoryId = _0_IEV_INJ.EventInjectMngrView._NP_RepositoryId


    _omni_op_d = {"updateSystemCmdUpdate": _0_IEV_INJ.EventInjectMngrView._d_updateSystemCmdUpdate}
    _omni_op_d.update(_0_IBASE_IF__POA.IBASE_IFheartbeatView._omni_op_d)

EventInjectMngrView._omni_skeleton = EventInjectMngrView
_0_IEV_INJ__POA.EventInjectMngrView = EventInjectMngrView
omniORB.registerSkeleton(EventInjectMngrView._NP_RepositoryId, EventInjectMngrView)
del EventInjectMngrView
__name__ = "spell.lib.hifly.interface.IEV_INJ"

# interface EventInjectManagerEntry
_0_IEV_INJ._d_EventInjectManagerEntry = (omniORB.tcInternal.tv_objref, "IDL:IEV_INJ/EventInjectManagerEntry:1.0", "EventInjectManagerEntry")
omniORB.typeMapping["IDL:IEV_INJ/EventInjectManagerEntry:1.0"] = _0_IEV_INJ._d_EventInjectManagerEntry
_0_IEV_INJ.EventInjectManagerEntry = omniORB.newEmptyClass()
class EventInjectManagerEntry (_0_IBASE_IF.IBASE_IFheartbeatSvr):
    _NP_RepositoryId = _0_IEV_INJ._d_EventInjectManagerEntry[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # exception BadEvent
    _0_IEV_INJ.EventInjectManagerEntry.BadEvent = omniORB.newEmptyClass()
    class BadEvent (CORBA.UserException):
        _NP_RepositoryId = "IDL:IEV_INJ/EventInjectManagerEntry/BadEvent:1.0"

        _NP_ClassName = "IEV_INJ.EventInjectManagerEntry.BadEvent"

        def __init__(self, reason):
            CORBA.UserException.__init__(self, reason)
            self.reason = reason
    
    _d_BadEvent  = (omniORB.tcInternal.tv_except, BadEvent, BadEvent._NP_RepositoryId, "BadEvent", "reason", (omniORB.tcInternal.tv_string,0))
    _tc_BadEvent = omniORB.tcInternal.createTypeCode(_d_BadEvent)
    omniORB.registerType(BadEvent._NP_RepositoryId, _d_BadEvent, _tc_BadEvent)
    
    # exception invalidCommand
    _0_IEV_INJ.EventInjectManagerEntry.invalidCommand = omniORB.newEmptyClass()
    class invalidCommand (CORBA.UserException):
        _NP_RepositoryId = "IDL:IEV_INJ/EventInjectManagerEntry/invalidCommand:1.0"

        _NP_ClassName = "IEV_INJ.EventInjectManagerEntry.invalidCommand"

        def __init__(self, reason):
            CORBA.UserException.__init__(self, reason)
            self.reason = reason
    
    _d_invalidCommand  = (omniORB.tcInternal.tv_except, invalidCommand, invalidCommand._NP_RepositoryId, "invalidCommand", "reason", (omniORB.tcInternal.tv_string,0))
    _tc_invalidCommand = omniORB.tcInternal.createTypeCode(_d_invalidCommand)
    omniORB.registerType(invalidCommand._NP_RepositoryId, _d_invalidCommand, _tc_invalidCommand)
    
    # exception commandFailure
    _0_IEV_INJ.EventInjectManagerEntry.commandFailure = omniORB.newEmptyClass()
    class commandFailure (CORBA.UserException):
        _NP_RepositoryId = "IDL:IEV_INJ/EventInjectManagerEntry/commandFailure:1.0"

        _NP_ClassName = "IEV_INJ.EventInjectManagerEntry.commandFailure"

        def __init__(self, command):
            CORBA.UserException.__init__(self, command)
            self.command = command
    
    _d_commandFailure  = (omniORB.tcInternal.tv_except, commandFailure, commandFailure._NP_RepositoryId, "commandFailure", "command", (omniORB.tcInternal.tv_string,0))
    _tc_commandFailure = omniORB.tcInternal.createTypeCode(_d_commandFailure)
    omniORB.registerType(commandFailure._NP_RepositoryId, _d_commandFailure, _tc_commandFailure)


_0_IEV_INJ.EventInjectManagerEntry = EventInjectManagerEntry
_0_IEV_INJ._tc_EventInjectManagerEntry = omniORB.tcInternal.createTypeCode(_0_IEV_INJ._d_EventInjectManagerEntry)
omniORB.registerType(EventInjectManagerEntry._NP_RepositoryId, _0_IEV_INJ._d_EventInjectManagerEntry, _0_IEV_INJ._tc_EventInjectManagerEntry)

# EventInjectManagerEntry operations and attributes
EventInjectManagerEntry._d_injectEvent = ((omniORB.typeMapping["IDL:IEV/Event:1.0"], ), (), {_0_IBASE.NotFound._NP_RepositoryId: _0_IBASE._d_NotFound, _0_IEV_INJ.EventInjectManagerEntry.BadEvent._NP_RepositoryId: _0_IEV_INJ.EventInjectManagerEntry._d_BadEvent})
EventInjectManagerEntry._d_injectSystemCommand = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (), {_0_IBASE.NotFound._NP_RepositoryId: _0_IBASE._d_NotFound, _0_IEV_INJ.EventInjectManagerEntry.invalidCommand._NP_RepositoryId: _0_IEV_INJ.EventInjectManagerEntry._d_invalidCommand})
EventInjectManagerEntry._d_getDefaultDataStream = ((), (omniORB.tcInternal.tv_long, ), None)
EventInjectManagerEntry._d_getDefaultSpacecraftID = ((), ((omniORB.tcInternal.tv_string,0), ), None)
EventInjectManagerEntry._d_unregisterView = ((), (), None)

# EventInjectManagerEntry object reference
class _objref_EventInjectManagerEntry (_0_IBASE_IF._objref_IBASE_IFheartbeatSvr):
    _NP_RepositoryId = EventInjectManagerEntry._NP_RepositoryId

    def __init__(self):
        _0_IBASE_IF._objref_IBASE_IFheartbeatSvr.__init__(self)

    def injectEvent(self, *args):
        return _omnipy.invoke(self, "injectEvent", _0_IEV_INJ.EventInjectManagerEntry._d_injectEvent, args)

    def injectSystemCommand(self, *args):
        return _omnipy.invoke(self, "injectSystemCommand", _0_IEV_INJ.EventInjectManagerEntry._d_injectSystemCommand, args)

    def getDefaultDataStream(self, *args):
        return _omnipy.invoke(self, "getDefaultDataStream", _0_IEV_INJ.EventInjectManagerEntry._d_getDefaultDataStream, args)

    def getDefaultSpacecraftID(self, *args):
        return _omnipy.invoke(self, "getDefaultSpacecraftID", _0_IEV_INJ.EventInjectManagerEntry._d_getDefaultSpacecraftID, args)

    def unregisterView(self, *args):
        return _omnipy.invoke(self, "unregisterView", _0_IEV_INJ.EventInjectManagerEntry._d_unregisterView, args)

    __methods__ = ["injectEvent", "injectSystemCommand", "getDefaultDataStream", "getDefaultSpacecraftID", "unregisterView"] + _0_IBASE_IF._objref_IBASE_IFheartbeatSvr.__methods__

omniORB.registerObjref(EventInjectManagerEntry._NP_RepositoryId, _objref_EventInjectManagerEntry)
_0_IEV_INJ._objref_EventInjectManagerEntry = _objref_EventInjectManagerEntry
del EventInjectManagerEntry, _objref_EventInjectManagerEntry

# EventInjectManagerEntry skeleton
__name__ = "spell.lib.hifly.interface.IEV_INJ__POA"
class EventInjectManagerEntry (_0_IBASE_IF__POA.IBASE_IFheartbeatSvr):
    _NP_RepositoryId = _0_IEV_INJ.EventInjectManagerEntry._NP_RepositoryId


    _omni_op_d = {"injectEvent": _0_IEV_INJ.EventInjectManagerEntry._d_injectEvent, "injectSystemCommand": _0_IEV_INJ.EventInjectManagerEntry._d_injectSystemCommand, "getDefaultDataStream": _0_IEV_INJ.EventInjectManagerEntry._d_getDefaultDataStream, "getDefaultSpacecraftID": _0_IEV_INJ.EventInjectManagerEntry._d_getDefaultSpacecraftID, "unregisterView": _0_IEV_INJ.EventInjectManagerEntry._d_unregisterView}
    _omni_op_d.update(_0_IBASE_IF__POA.IBASE_IFheartbeatSvr._omni_op_d)

EventInjectManagerEntry._omni_skeleton = EventInjectManagerEntry
_0_IEV_INJ__POA.EventInjectManagerEntry = EventInjectManagerEntry
omniORB.registerSkeleton(EventInjectManagerEntry._NP_RepositoryId, EventInjectManagerEntry)
del EventInjectManagerEntry
__name__ = "spell.lib.hifly.interface.IEV_INJ"

# interface EventInjectManager
_0_IEV_INJ._d_EventInjectManager = (omniORB.tcInternal.tv_objref, "IDL:IEV_INJ/EventInjectManager:1.0", "EventInjectManager")
omniORB.typeMapping["IDL:IEV_INJ/EventInjectManager:1.0"] = _0_IEV_INJ._d_EventInjectManager
_0_IEV_INJ.EventInjectManager = omniORB.newEmptyClass()
class EventInjectManager (_0_IBASE_IF.IBASE_IFheartbeatSvr):
    _NP_RepositoryId = _0_IEV_INJ._d_EventInjectManager[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    ServiceName = "EV_INJ"


_0_IEV_INJ.EventInjectManager = EventInjectManager
_0_IEV_INJ._tc_EventInjectManager = omniORB.tcInternal.createTypeCode(_0_IEV_INJ._d_EventInjectManager)
omniORB.registerType(EventInjectManager._NP_RepositoryId, _0_IEV_INJ._d_EventInjectManager, _0_IEV_INJ._tc_EventInjectManager)

# EventInjectManager operations and attributes
EventInjectManager._d_registerView = ((omniORB.typeMapping["IDL:IEV_INJ/EventInjectMngrView:1.0"], omniORB.tcInternal.tv_long), (omniORB.typeMapping["IDL:IEV_INJ/EventInjectManagerEntry:1.0"], ), None)

# EventInjectManager object reference
class _objref_EventInjectManager (_0_IBASE_IF._objref_IBASE_IFheartbeatSvr):
    _NP_RepositoryId = EventInjectManager._NP_RepositoryId

    def __init__(self):
        _0_IBASE_IF._objref_IBASE_IFheartbeatSvr.__init__(self)

    def registerView(self, *args):
        return _omnipy.invoke(self, "registerView", _0_IEV_INJ.EventInjectManager._d_registerView, args)

    __methods__ = ["registerView"] + _0_IBASE_IF._objref_IBASE_IFheartbeatSvr.__methods__

omniORB.registerObjref(EventInjectManager._NP_RepositoryId, _objref_EventInjectManager)
_0_IEV_INJ._objref_EventInjectManager = _objref_EventInjectManager
del EventInjectManager, _objref_EventInjectManager

# EventInjectManager skeleton
__name__ = "spell.lib.hifly.interface.IEV_INJ__POA"
class EventInjectManager (_0_IBASE_IF__POA.IBASE_IFheartbeatSvr):
    _NP_RepositoryId = _0_IEV_INJ.EventInjectManager._NP_RepositoryId


    _omni_op_d = {"registerView": _0_IEV_INJ.EventInjectManager._d_registerView}
    _omni_op_d.update(_0_IBASE_IF__POA.IBASE_IFheartbeatSvr._omni_op_d)

EventInjectManager._omni_skeleton = EventInjectManager
_0_IEV_INJ__POA.EventInjectManager = EventInjectManager
omniORB.registerSkeleton(EventInjectManager._NP_RepositoryId, EventInjectManager)
del EventInjectManager
__name__ = "spell.lib.hifly.interface.IEV_INJ"

#
# End of module "IEV_INJ"
#
__name__ = "spell.lib.hifly.interface.IEV_INJ_idl"

_exported_modules = ( "spell.lib.hifly.interface.IEV_INJ", )

# The end.
